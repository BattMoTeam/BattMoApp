@software{BattMo,
  author       = {Xavier Raynaud and
                  August Johansson and
                  Halvor Møll Nilsen and
                  Francesca Watson and
                  Simon Clark and
                  Erasdna},
  title        = {BattMoTeam/BattMo: v0.3.0},
  month        = feb,
  year         = 2024,
  publisher    = {Zenodo},
  version      = {v0.3.0},
  doi          = {10.5281/zenodo.10633682},
  url          = {https://doi.org/10.5281/zenodo.10633682},
}

@software{MATLAB,
year = {2023},
author = {MATLAB},
title = {MATLAB},
version = {Version R2023b},
url = {https://se.mathworks.com/},
publisher = {The MathWorks Inc.}
}

@article{julia,
  author = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
  title = {Julia: A Fresh Approach to Numerical Computing},
  journal = {SIAM Review},
  volume = {59},
  number = {1},
  pages = {65-98},
  year = {2017},
  version = {v1.11.2},
  doi = {10.1137/141000671},

  URL = { 
      
          https://doi.org/10.1137/141000671
      
      

  },
  eprint = { 
      
          https://doi.org/10.1137/141000671
      
      

  }
  ,
      abstract = { Bridging cultures that have often been distant, Julia combines expertise from the diverse fields of computer science and computational science to create a new approach to numerical computing. Julia is designed to be easy and fast and questions notions generally held to be “laws of nature" by practitioners of numerical computing: \beginlist \item High-level dynamic programs have to be slow. \item One must prototype in one language and then rewrite in another language for speed or deployment. \item There are parts of a system appropriate for the programmer, and other parts that are best left untouched as they have been built by the experts. \endlist We introduce the Julia programming language and its design---a dance between specialization and abstraction. Specialization allows for custom treatment. Multiple dispatch, a technique from computer science, picks the right algorithm for the right circumstance. Abstraction, which is what good computation is really about, recognizes what remains the same after differences are stripped away. Abstractions in mathematics are captured as code through another technique from computer science, generic programming. Julia shows that one can achieve machine performance without sacrificing human convenience. }
}

@software{sqlite,
  title = {{SQLite}},
  author    = {D. Richard Hipp},
  year = {2024},
  version = {v3.45.3},
  url = {https://sqlite.org/},
}

@article{chen2020,
  title={Development of experimental techniques for parameterization of multi-scale lithium-ion battery models},
  author={Chen, Chang-Hui and Planella, Ferran Brosa and O’regan, Kieran and Gastol, Dominika and Widanage, W Dhammika and Kendrick, Emma},
  journal={Journal of The Electrochemical Society},
  volume={167},
  number={8},
  pages={080534},
  year={2020},
  publisher={IOP Publishing}
}

@software{http,
  title = {{HTTP.jl}},
  author    = {JuliaWeb},
  year = {2024},
  version = {v1.10.14},
  url = {https://juliaweb.github.io/HTTP.jl/stable/},
  doi = {10.5281/zenodo.11032263}
}

@software{docker,
  title = {Docker},
  author = {Docker, Inc.},
  url = {https://www.docker.com},
  version = {v4.36.0},
  year = {2024}  % Update the year based on when you accessed Docker.
}

@article{FAIR,
   abstract = {<p>There is an urgent need to improve the infrastructure supporting the reuse of scholarly data. A diverse set of stakeholders—representing academia, industry, funding agencies, and scholarly publishers—have come together to design and jointly endorse a concise and measureable set of principles that we refer to as the FAIR Data Principles. The intent is that these may act as a guideline for those wishing to enhance the reusability of their data holdings. Distinct from peer initiatives that focus on the human scholar, the FAIR Principles put specific emphasis on enhancing the ability of machines to automatically find and use the data, in addition to supporting its reuse by individuals. This Comment is the first formal publication of the FAIR Principles, and includes the rationale behind them, and some exemplar implementations in the community.</p>},
   author = {Mark D. Wilkinson and Michel Dumontier and IJsbrand Jan Aalbersberg and Gabrielle Appleton and Myles Axton and Arie Baak and Niklas Blomberg and Jan-Willem Boiten and Luiz Bonino da Silva Santos and Philip E. Bourne and Jildau Bouwman and Anthony J. Brookes and Tim Clark and Mercè Crosas and Ingrid Dillo and Olivier Dumon and Scott Edmunds and Chris T. Evelo and Richard Finkers and Alejandra Gonzalez-Beltran and Alasdair J.G. Gray and Paul Groth and Carole Goble and Jeffrey S. Grethe and Jaap Heringa and Peter A.C ’t Hoen and Rob Hooft and Tobias Kuhn and Ruben Kok and Joost Kok and Scott J. Lusher and Maryann E. Martone and Albert Mons and Abel L. Packer and Bengt Persson and Philippe Rocca-Serra and Marco Roos and Rene van Schaik and Susanna-Assunta Sansone and Erik Schultes and Thierry Sengstag and Ted Slater and George Strawn and Morris A. Swertz and Mark Thompson and Johan van der Lei and Erik van Mulligen and Jan Velterop and Andra Waagmeester and Peter Wittenburg and Katherine Wolstencroft and Jun Zhao and Barend Mons},
   doi = {10.1038/sdata.2016.18},
   issn = {2052-4463},
   issue = {1},
   journal = {Scientific Data},
   month = {3},
   pages = {160018},
   title = {The FAIR Guiding Principles for scientific data management and stewardship},
   volume = {3},
   year = {2016},
}

@online{STAR_LD,
   organisation = {Star Open Data},
   author = {Tim Berners-Lee},
   year = {2006},
   title = {Star Open Data},
   journal = {https://5stardata.info/en/},
   url = {https://www.w3.org/DesignIssues/LinkedData.html},
}

@online{BattINFO,
   url = {https://github.com/BIG-MAP/BattINFO},
   abstract = {<p>Battery research initiatives and giga‐scale production generate an abundance of diverse data spanning myriad fields of science and engineering. Modern battery development is driven by the confluence of traditional domains of natural science with emerging fields like artificial intelligence and the vast engineering and logistical knowledge needed to sustain the global reach of battery Gigafactories. Despite the unprecedented volume of dedicated research targeting affordable, high‐performance, and sustainable battery designs, these endeavours are held back by the lack of common battery data and vocabulary standards, as well as, machine readable tools to support interoperability. An ontology is a data model that represents domain knowledge as a map of concepts and the relations between them. A battery ontology offers an effective means to unify battery‐related activities across different fields, accelerate the flow of knowledge in both human‐ and machine‐readable formats, and support the integration of artificial intelligence in battery development. Furthermore, a logically consistent and expansive ontology is essential to support battery digitalization and standardization efforts, such as, the battery passport. This review summarizes the current state of ontology development, the needs for an ontology in the battery field, and current activities to meet this need.</p>},
   author = {Simon Clark and Francesca L. Bleken and Simon Stier and Eibar Flores and Casper Welzel Andersen and Marek Marcinek and Anna Szczesna‐Chrzan and Miran Gaberscek and M. Rosa Palacin and Martin Uhrin and Jesper Friis},
   doi = {10.1002/aenm.202102702},
   issn = {1614-6832},
   issue = {17},
   journal = {Advanced Energy Materials},
   month = {5},
   title = {Toward a Unified Description of Battery Data},
   volume = {12},
   year = {2022},
   note = {Accessed December 2024},
}

@online{EMMO,
   url = {https://github.com/emmo-repo/},
   organisation = {Europeean Materials Modelling Council (EMMC)},
   note = {Accessed December 2024},
   year = {2024},
   title = {Elementary Multiperspective Material Ontology (EMMO)},
   author = {EMMO}
}

@software{python,
  title = {{Python}},
  organisation = {Python Software Foundation},
  author    = {Guido van Rossum and the Python Development Team},
  year = {2024},
  url = {https://www.python.org/},
  version = {v3.12.0}
}


@online{json,
  title = {{JSON}},
  year = {2017},
  note = {JavaScript Object Notation},
  url = {https://www.json.org/},
  note = {Accessed December 2024},
}

@software{streamlit,
  title = {{Streamlit}},
  version = {1.39.0},
  author = {Allaire, Adrien and Brondex, Alexis and Plotkin, Randy and others},
  organization = {Streamlit Inc.},
  year = {2024},
  url = {https://www.streamlit.io/},
}