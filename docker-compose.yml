version: "3.3"

services:

  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
      target: dev
    container_name: api
    restart: always
    ports:
      - "8081:8081"
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - ./api/scripts:/api/scripts
      - ./api/api.jl:/api/api.jl
      - ./api/logs:/api/logs
      - ./api/input_files:/api/input_files
      - ./api/results:/api/results
    # command: julia --project=. -e 'include("api.jl")' --color=yes --depwarn=no --project=@. --sysimage="pre-compilation/sysimage.so" -q -i -- $$(dirname $$0)/../bootstrap.jl -s=true "$$@"

    command: julia --project=. -e 'include("api.jl")'


  gui:
    build: ./gui
    container_name: gui
    restart: always
    ports:
      - "8501:8501"
    networks:
      - app-network
    volumes:
      - ./gui:/app

    command: streamlit run app.py --global.disableWidgetStateDuplicationWarning true --server.port=8501


  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    networks:
      - app-network
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /usr/share/nginx/html/.well-known:/usr/share/nginx/html/.well-known
    command: nginx -g 'daemon off;'

  # umami:
  #   image: docker.umami.is/umami-software/umami:postgresql-latest
  #   container_name: umami
  #   restart: always
  #   environment:
  #     DATABASE_URL: postgres://umami:password@umami-db/umami
  #     DATABASE_TYPE: postgres
  #     HASH_SALT: ${HASH_SALT}  # Replace this with a secure, random hash salt
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - app-network
  #   depends_on:
  #     - umami-db

  # umami-db:
  #   image: postgres:13
  #   container_name: umami-db
  #   restart: always
  #   environment:
  #     POSTGRES_USER: umami
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Replace with a strong password
  #     POSTGRES_DB: umami
  #   networks:
  #     - app-network
  #   volumes:
  #     - umami_db_data:/var/lib/postgresql/data

# Define volumes at the root level, outside of services
# volumes:
#   umami_db_data:

networks:
  app-network:
    driver: bridge